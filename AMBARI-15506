diff --git a/ambari-common/src/main/python/resource_management/libraries/functions/namenode_ha_utils.py b/ambari-common/src/main/python/resource_management/libraries/functions/namenode_ha_utils.py
index 36a34c1..df61cc0 100644
--- a/ambari-common/src/main/python/resource_management/libraries/functions/namenode_ha_utils.py
+++ b/ambari-common/src/main/python/resource_management/libraries/functions/namenode_ha_utils.py
@@ -67,7 +67,7 @@ def get_namenode_states_noretries(hdfs_site, security_enabled, run_user):
   standby_namenodes = []
   unknown_namenodes = []
   
-  name_service = hdfs_site['dfs.nameservices']
+  name_service = get_nameservice(hdfs_site)
   nn_unique_ids_key = 'dfs.ha.namenodes.' + name_service
 
   # now we have something like 'nn1,nn2,nn3,nn4'
@@ -117,7 +117,7 @@ def get_namenode_states_noretries(hdfs_site, security_enabled, run_user):
   return active_namenodes, standby_namenodes, unknown_namenodes
 
 def is_ha_enabled(hdfs_site):
-  dfs_ha_nameservices = hdfs_site['dfs.nameservices']
+  dfs_ha_nameservices = get_nameservice(hdfs_site)
   
   if is_empty(dfs_ha_nameservices):
     return False
@@ -151,7 +151,7 @@ def get_property_for_active_namenode(hdfs_site, property_name, security_enabled,
   value = None
   rpc_key = None
   if is_ha_enabled(hdfs_site):
-    name_service = hdfs_site['dfs.nameservices']
+    name_service = get_nameservice(hdfs_site)
     active_namenodes = get_namenode_states(hdfs_site, security_enabled, run_user)[0]
     
     if not len(active_namenodes):
@@ -171,3 +171,20 @@ def get_property_for_active_namenode(hdfs_site, property_name, security_enabled,
       value = value.replace(INADDR_ANY, rpc_host)
 
   return value
+
+def get_nameservice(hdfs_site):
+  """
+  Multiple nameservices can be configured for exmaple to support seamless distcp between two HA clusters. The nameservices
+  are defined as a comma separated list in hdfs_site['dfs.nameservices']. This method splits the value into in an array
+  and identifies the nameservice for the current cluster with what is set in hdfs_site['dfs.namenode.shared.edits.dir'].
+  By default the first nameservice is returned or empty.
+  :param hdfs_site:
+  :return: string or empty
+  """
+  name_service = hdfs_site['dfs.nameservices']
+  if name_service:
+    for ns in name_service.split(","):
+      if ns in hdfs_site['dfs.namenode.shared.edits.dir']: # better would be core_site['fs.defaultFS'] but it's not available
+        return ns
+    return name_service.split(",")[0] # default to return the first nameservice
+  return name_service
\ No newline at end of file
